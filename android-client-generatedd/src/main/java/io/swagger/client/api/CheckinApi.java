/**
 * flexcheckin
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.CheckinSession;
import io.swagger.client.model.CreateValidation;
import io.swagger.client.model.Event;
import io.swagger.client.model.Organizer;
import io.swagger.client.model.OrganizerAuth;
import io.swagger.client.model.PongApi;
import io.swagger.client.model.Purchase;
import io.swagger.client.model.Status;
import io.swagger.client.model.TicketType;
import io.swagger.client.model.Validation;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CheckinApi {
  String basePath = "https://checkin.flexbillet.dk/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Clone a checkin session. Useful if more client should have the same setup ie. scan same events and tickettypes
  * 
   * @param checkinSessionId checkinSessionId
   * @return CheckinSession
  */
  public CheckinSession cloneCheckinSession (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling cloneCheckinSession",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling cloneCheckinSession"));
      }
  

  // create path and map variables
  String path = "/checkinsession/${checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CheckinSession) ApiInvoker.deserialize(localVarResponse, "", CheckinSession.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Clone a checkin session. Useful if more client should have the same setup ie. scan same events and tickettypes
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void cloneCheckinSession (String checkinSessionId, final Response.Listener<CheckinSession> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling cloneCheckinSession",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling cloneCheckinSession"));
    }
    

    // create path and map variables
    String path = "/checkinsession/${checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CheckinSession) ApiInvoker.deserialize(localVarResponse,  "", CheckinSession.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create checkin session based on organizer api authentication settings.
  * 
   * @param organizerAuth organizerAuth
   * @return CheckinSession
  */
  public CheckinSession createCheckinSession (OrganizerAuth organizerAuth) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = organizerAuth;
  
      // verify the required parameter 'organizerAuth' is set
      if (organizerAuth == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizerAuth' when calling createCheckinSession",
      new ApiException(400, "Missing the required parameter 'organizerAuth' when calling createCheckinSession"));
      }
  

  // create path and map variables
  String path = "/checkinsession/create".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CheckinSession) ApiInvoker.deserialize(localVarResponse, "", CheckinSession.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create checkin session based on organizer api authentication settings.
   * 
   * @param organizerAuth organizerAuth
  */
  public void createCheckinSession (OrganizerAuth organizerAuth, final Response.Listener<CheckinSession> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = organizerAuth;

  
    // verify the required parameter 'organizerAuth' is set
    if (organizerAuth == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'organizerAuth' when calling createCheckinSession",
         new ApiException(400, "Missing the required parameter 'organizerAuth' when calling createCheckinSession"));
    }
    

    // create path and map variables
    String path = "/checkinsession/create".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CheckinSession) ApiInvoker.deserialize(localVarResponse,  "", CheckinSession.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create validation for a barcode.
  * 
   * @param createValidation createValidation
   * @return Validation
  */
  public Validation createValidation (CreateValidation createValidation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = createValidation;
  
      // verify the required parameter 'createValidation' is set
      if (createValidation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'createValidation' when calling createValidation",
      new ApiException(400, "Missing the required parameter 'createValidation' when calling createValidation"));
      }
  

  // create path and map variables
  String path = "/validation/create".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Validation) ApiInvoker.deserialize(localVarResponse, "", Validation.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Create validation for a barcode.
   * 
   * @param createValidation createValidation
  */
  public void createValidation (CreateValidation createValidation, final Response.Listener<Validation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = createValidation;

  
    // verify the required parameter 'createValidation' is set
    if (createValidation == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'createValidation' when calling createValidation",
         new ApiException(400, "Missing the required parameter 'createValidation' when calling createValidation"));
    }
    

    // create path and map variables
    String path = "/validation/create".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Validation) ApiInvoker.deserialize(localVarResponse,  "", Validation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete checkin session when the checkin session is completed
  * 
   * @param checkinSessionId checkinSessionId
   * @return void
  */
  public void deleteCheckinSession (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling deleteCheckinSession",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling deleteCheckinSession"));
      }
  

  // create path and map variables
  String path = "/checkinsession/{checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return ;
        } else {
           return ;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Delete checkin session when the checkin session is completed
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void deleteCheckinSession (String checkinSessionId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling deleteCheckinSession",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling deleteCheckinSession"));
    }
    

    // create path and map variables
    String path = "/checkinsession/{checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get details for a checkin session
  * 
   * @param checkinSessionId checkinSessionId
   * @return CheckinSession
  */
  public CheckinSession getCheckinSession (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getCheckinSession",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getCheckinSession"));
      }
  

  // create path and map variables
  String path = "/checkinsession/{checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CheckinSession) ApiInvoker.deserialize(localVarResponse, "", CheckinSession.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get details for a checkin session
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void getCheckinSession (String checkinSessionId, final Response.Listener<CheckinSession> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getCheckinSession",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getCheckinSession"));
    }
    

    // create path and map variables
    String path = "/checkinsession/{checkinSessionId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CheckinSession) ApiInvoker.deserialize(localVarResponse,  "", CheckinSession.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get details of scannable events for checkinsession
  * 
   * @param checkinSessionId checkinSessionId
   * @return List<Event>
  */
  public List<Event> getEvents (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getEvents",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getEvents"));
      }
  

  // create path and map variables
  String path = "/checkinsession/{checkinSessionId}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Event>) ApiInvoker.deserialize(localVarResponse, "array", Event.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get details of scannable events for checkinsession
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void getEvents (String checkinSessionId, final Response.Listener<List<Event>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getEvents",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getEvents"));
    }
    

    // create path and map variables
    String path = "/checkinsession/{checkinSessionId}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Event>) ApiInvoker.deserialize(localVarResponse,  "array", Event.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get organizer related checkinsession
  * 
   * @param checkinSessionId checkinSessionId
   * @return Organizer
  */
  public Organizer getOrganizer (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getOrganizer",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getOrganizer"));
      }
  

  // create path and map variables
  String path = "/checkinsession/{checkinSessionId}/organizer".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Organizer) ApiInvoker.deserialize(localVarResponse, "", Organizer.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get organizer related checkinsession
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void getOrganizer (String checkinSessionId, final Response.Listener<Organizer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getOrganizer",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getOrganizer"));
    }
    

    // create path and map variables
    String path = "/checkinsession/{checkinSessionId}/organizer".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Organizer) ApiInvoker.deserialize(localVarResponse,  "", Organizer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get status for a checkinsession with count of tickets and scanned tickets
  * 
   * @param checkinSessionId checkinSessionId
   * @return Status
  */
  public Status getStatus (String checkinSessionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getStatus",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getStatus"));
      }
  

  // create path and map variables
  String path = "/checkinsession/{checkinSessionId}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Status) ApiInvoker.deserialize(localVarResponse, "", Status.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get status for a checkinsession with count of tickets and scanned tickets
   * 
   * @param checkinSessionId checkinSessionId
  */
  public void getStatus (String checkinSessionId, final Response.Listener<Status> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling getStatus",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling getStatus"));
    }
    

    // create path and map variables
    String path = "/checkinsession/{checkinSessionId}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Status) ApiInvoker.deserialize(localVarResponse,  "", Status.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get details of tickettype
  * 
   * @param ticketTypeID ticketTypeID
   * @return TicketType
  */
  public TicketType getTicketType (String ticketTypeID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'ticketTypeID' is set
      if (ticketTypeID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'ticketTypeID' when calling getTicketType",
      new ApiException(400, "Missing the required parameter 'ticketTypeID' when calling getTicketType"));
      }
  

  // create path and map variables
  String path = "/tickettype/{ticketTypeID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ticketTypeID" + "\\}", apiInvoker.escapeString(ticketTypeID.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TicketType) ApiInvoker.deserialize(localVarResponse, "", TicketType.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get details of tickettype
   * 
   * @param ticketTypeID ticketTypeID
  */
  public void getTicketType (String ticketTypeID, final Response.Listener<TicketType> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'ticketTypeID' is set
    if (ticketTypeID == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'ticketTypeID' when calling getTicketType",
         new ApiException(400, "Missing the required parameter 'ticketTypeID' when calling getTicketType"));
    }
    

    // create path and map variables
    String path = "/tickettype/{ticketTypeID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "ticketTypeID" + "\\}", apiInvoker.escapeString(ticketTypeID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TicketType) ApiInvoker.deserialize(localVarResponse,  "", TicketType.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get validation of a barcode
  * 
   * @param validationId validationId
   * @return Validation
  */
  public Validation getValidate (String validationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'validationId' is set
      if (validationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'validationId' when calling getValidate",
      new ApiException(400, "Missing the required parameter 'validationId' when calling getValidate"));
      }
  

  // create path and map variables
  String path = "/validation/{validationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "validationId" + "\\}", apiInvoker.escapeString(validationId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (Validation) ApiInvoker.deserialize(localVarResponse, "", Validation.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get validation of a barcode
   * 
   * @param validationId validationId
  */
  public void getValidate (String validationId, final Response.Listener<Validation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'validationId' is set
    if (validationId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'validationId' when calling getValidate",
         new ApiException(400, "Missing the required parameter 'validationId' when calling getValidate"));
    }
    

    // create path and map variables
    String path = "/validation/{validationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "validationId" + "\\}", apiInvoker.escapeString(validationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Validation) ApiInvoker.deserialize(localVarResponse,  "", Validation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * ping
  * 
   * @return PongApi
  */
  public PongApi ping () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/ping".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (PongApi) ApiInvoker.deserialize(localVarResponse, "", PongApi.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * ping
   * 

  */
  public void ping (final Response.Listener<PongApi> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/ping".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PongApi) ApiInvoker.deserialize(localVarResponse,  "", PongApi.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search for purchases related to the checkinsession events. Notice this is dependend on running backend system.
  * 
   * @param checkinSessionId checkinSessionId
   * @param searchString searchString
   * @return List<Purchase>
  */
  public List<Purchase> searchPurchases (String checkinSessionId, String searchString) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'checkinSessionId' is set
      if (checkinSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling searchPurchases",
      new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling searchPurchases"));
      }
  
      // verify the required parameter 'searchString' is set
      if (searchString == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'searchString' when calling searchPurchases",
      new ApiException(400, "Missing the required parameter 'searchString' when calling searchPurchases"));
      }
  

  // create path and map variables
  String path = "/checkinsession/${checkinSessionId}/purchases".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "searchString", searchString));


      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<Purchase>) ApiInvoker.deserialize(localVarResponse, "array", Purchase.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Search for purchases related to the checkinsession events. Notice this is dependend on running backend system.
   * 
   * @param checkinSessionId checkinSessionId   * @param searchString searchString
  */
  public void searchPurchases (String checkinSessionId, String searchString, final Response.Listener<List<Purchase>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'checkinSessionId' is set
    if (checkinSessionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSessionId' when calling searchPurchases",
         new ApiException(400, "Missing the required parameter 'checkinSessionId' when calling searchPurchases"));
    }
    
    // verify the required parameter 'searchString' is set
    if (searchString == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'searchString' when calling searchPurchases",
         new ApiException(400, "Missing the required parameter 'searchString' when calling searchPurchases"));
    }
    

    // create path and map variables
    String path = "/checkinsession/${checkinSessionId}/purchases".replaceAll("\\{format\\}","json").replaceAll("\\{" + "checkinSessionId" + "\\}", apiInvoker.escapeString(checkinSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "searchString", searchString));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Purchase>) ApiInvoker.deserialize(localVarResponse,  "array", Purchase.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update checkin session to specify the events and tickettypes to scan within the session
  * 
   * @param checkinSession checkinSession
   * @return void
  */
  public void updateCheckinSession (CheckinSession checkinSession) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = checkinSession;
  
      // verify the required parameter 'checkinSession' is set
      if (checkinSession == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkinSession' when calling updateCheckinSession",
      new ApiException(400, "Missing the required parameter 'checkinSession' when calling updateCheckinSession"));
      }
  

  // create path and map variables
  String path = "/checkinsession/update".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "application/json"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return ;
        } else {
           return ;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Update checkin session to specify the events and tickettypes to scan within the session
   * 
   * @param checkinSession checkinSession
  */
  public void updateCheckinSession (CheckinSession checkinSession, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = checkinSession;

  
    // verify the required parameter 'checkinSession' is set
    if (checkinSession == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'checkinSession' when calling updateCheckinSession",
         new ApiException(400, "Missing the required parameter 'checkinSession' when calling updateCheckinSession"));
    }
    

    // create path and map variables
    String path = "/checkinsession/update".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
