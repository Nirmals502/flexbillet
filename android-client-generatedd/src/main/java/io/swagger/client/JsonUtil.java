/**
 * flexcheckin
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("CheckinSession".equalsIgnoreCase(className)) {
      return new TypeToken<List<CheckinSession>>(){}.getType();
    }
    
    if ("CreateValidation".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateValidation>>(){}.getType();
    }
    
    if ("Event".equalsIgnoreCase(className)) {
      return new TypeToken<List<Event>>(){}.getType();
    }
    
    if ("Href".equalsIgnoreCase(className)) {
      return new TypeToken<List<Href>>(){}.getType();
    }
    
    if ("IdAndHref".equalsIgnoreCase(className)) {
      return new TypeToken<List<IdAndHref>>(){}.getType();
    }
    
    if ("Organizer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Organizer>>(){}.getType();
    }
    
    if ("OrganizerAuth".equalsIgnoreCase(className)) {
      return new TypeToken<List<OrganizerAuth>>(){}.getType();
    }
    
    if ("PongApi".equalsIgnoreCase(className)) {
      return new TypeToken<List<PongApi>>(){}.getType();
    }
    
    if ("Purchase".equalsIgnoreCase(className)) {
      return new TypeToken<List<Purchase>>(){}.getType();
    }
    
    if ("ScannableBarcode".equalsIgnoreCase(className)) {
      return new TypeToken<List<ScannableBarcode>>(){}.getType();
    }
    
    if ("ScannableBarcodesGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<ScannableBarcodesGroup>>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<List<Status>>(){}.getType();
    }
    
    if ("TicketType".equalsIgnoreCase(className)) {
      return new TypeToken<List<TicketType>>(){}.getType();
    }
    
    if ("Validation".equalsIgnoreCase(className)) {
      return new TypeToken<List<Validation>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("CheckinSession".equalsIgnoreCase(className)) {
      return new TypeToken<CheckinSession>(){}.getType();
    }
    
    if ("CreateValidation".equalsIgnoreCase(className)) {
      return new TypeToken<CreateValidation>(){}.getType();
    }
    
    if ("Event".equalsIgnoreCase(className)) {
      return new TypeToken<Event>(){}.getType();
    }
    
    if ("Href".equalsIgnoreCase(className)) {
      return new TypeToken<Href>(){}.getType();
    }
    
    if ("IdAndHref".equalsIgnoreCase(className)) {
      return new TypeToken<IdAndHref>(){}.getType();
    }
    
    if ("Organizer".equalsIgnoreCase(className)) {
      return new TypeToken<Organizer>(){}.getType();
    }
    
    if ("OrganizerAuth".equalsIgnoreCase(className)) {
      return new TypeToken<OrganizerAuth>(){}.getType();
    }
    
    if ("PongApi".equalsIgnoreCase(className)) {
      return new TypeToken<PongApi>(){}.getType();
    }
    
    if ("Purchase".equalsIgnoreCase(className)) {
      return new TypeToken<Purchase>(){}.getType();
    }
    
    if ("ScannableBarcode".equalsIgnoreCase(className)) {
      return new TypeToken<ScannableBarcode>(){}.getType();
    }
    
    if ("ScannableBarcodesGroup".equalsIgnoreCase(className)) {
      return new TypeToken<ScannableBarcodesGroup>(){}.getType();
    }
    
    if ("Status".equalsIgnoreCase(className)) {
      return new TypeToken<Status>(){}.getType();
    }
    
    if ("TicketType".equalsIgnoreCase(className)) {
      return new TypeToken<TicketType>(){}.getType();
    }
    
    if ("Validation".equalsIgnoreCase(className)) {
      return new TypeToken<Validation>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
